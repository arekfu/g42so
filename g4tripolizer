#!/usr/bin/env python
# coding: utf-8

import argparse

parser = argparse.ArgumentParser(
        description='Convert source code for a Geant4 detector construction into a geometry that can be read by TRIPOLI-4Â®.',
        epilog='Any unrecognized CLI options will be passed to the compiler.')

# arguments
parser.add_argument('-o', '--output', help='name of the file to generate', default='libG4Tripolizer.so')
parser.add_argument('-I', '--include', help='directories to search for header files (may be specified multiple times)', action='append', default=[])
parser.add_argument('-d', '--detector', help='name of the detector-construction class')
parser.add_argument('-p', '--parallel', help='name of a class defining a parallel geometry (may be specified multiple times; order matters)', action='append')
parser.add_argument('--', dest='remanining_flags', metavar='FLAG', nargs='*', help='pass all the remaining flags to the compiler')

# parse the arguments
args = parser.parse_args()

#define the logger
import logging
logging.basicConfig(level=logging.WARNING)

# process the options
import find_classes

if args.detector:
    detector = args.detector
else:
    detector = find_classes.find_in_dirs(
            base='G4VUserDetectorConstruction',
            dirs=args.include,
            suffixes=['.hh', '.hpp', '.h'],
            many=False,
            required=True)

if args.parallel:
    parallel = args.parallel
else:
    parallel = find_classes.find_in_dirs(
            base='G4VUserParallelWorld',
            dirs=args.include,
            suffixes=['.hh', '.hpp', '.h'])
    if len(parallel)>1:
        logging.warning(
                'found several parallel worlds. I will apply them in the following order: '
                + str(parallel)
                + '. If this is not what you want, you should explicitly use the -p option.')

print detector
print parallel

